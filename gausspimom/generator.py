import os
from prompt_toolkit import prompt
from prompt_toolkit.completion import WordCompleter

import re

def read_xyz_file(xyz_path):
    """Reads XYZ coordinates with flexible delimiters and optional atomic index column."""
    try:
        coords = []
        with open(xyz_path, 'r') as f:
            for line in f:
                # Remove whitespace and skip blank lines
                if not line.strip():
                    continue

                # Split by any whitespace, comma, or tab
                parts = re.split(r'[,\s]+', line.strip())

                # Handle formats: [atom, x, y, z] or [atom, _, x, y, z]
                if len(parts) == 4:
                    atom, x, y, z = parts
                elif len(parts) == 5 and parts[1].isdigit():
                    atom, _, x, y, z = parts
                else:
                    print(f"‚ö†Ô∏è Skipping unrecognized line: {line.strip()}")
                    continue

                coords.append(f"{atom} {x} {y} {z}")
        return coords

    except Exception as e:
        print(f"‚ùå Failed to read XYZ file: {e}")
        return []


def create_gaussian_input():
    print("=" * 75)
    print("üìÑ Gaussian Input File Generator")
    print("    - Generates .com file from XYZ and route info.")
    print("    - Includes optional title and basis set footer.")
    print("=" * 75)

    filename = prompt("Enter name for output .com file (without extension): ").strip()
    if not filename:
        print("‚ùå No filename provided.")
        return

    routes = [
        "b3lyp/6-31g(d) opt freq int=superfinegrid scf=(fermi,novaracc)",
        "cam-b3lyp/def2tzvp td(nstates=10) int=superfinegrid scf=(fermi,novaracc)",
        "wb97xd/6-311++g(d,p) opt=tight freq int=superfinegrid scf=(fermi,novaracc)",
        "hf/6-31g sp int=superfinegrid scf=(fermi,novaracc)",
        "m06-2x/cc-pvtz opt freq int=superfinegrid scf=(fermi,novaracc)",
        "pbe0/def2svp opt freq int=superfinegrid scf=(fermi,novaracc)",
        "m062x/def2tzvp ts freq int=superfinegrid scf=(fermi,novaracc)",
        "wb97mv/def2tzvppd sp int=superfinegrid scf=(fermi,novaracc)",
        "b3lyp/def2svp opt freq=noraman int=superfinegrid scf=(fermi,novaracc)",
        "tpssh/cc-pvtz opt=modredundant freq int=superfinegrid scf=(fermi,novaracc)"
    ]
    route_completer = WordCompleter(routes)
    route = prompt("Enter Gaussian route line: ", completer=route_completer).strip()

    title = prompt("Enter title (or press ENTER for default): ").strip() or "Gaussian input file generated by gausspimom"
    charge = prompt("Enter total charge (default 0): ").strip() or "0"
    multiplicity = prompt("Enter multiplicity (default 1): ").strip() or "1"

    xyz_file = prompt("Enter path to XYZ coordinates file: ").strip()
    coords = read_xyz_file(xyz_file)
    if not coords:
        print("‚ùå No valid coordinates found.")
        return

    basis = prompt("Enter optional basis set footer filename (or press ENTER to skip): ").strip()
    if basis and not os.path.exists(basis):
        print("‚ö†Ô∏è Footer file not found. Ignoring.")
        basis = None

    output_path = filename + ".com"
    with open(output_path, "w") as f:
        f.write(f"%chk={filename}.chk\n")
        f.write(f"#p {route}\n\n")
        f.write(f"{title}\n\n")
        f.write(f"{charge} {multiplicity}\n")
        for line in coords:
            f.write(line + "\n")
        f.write("\n")
        if basis:
            f.write(f"@{basis}\n")

    print(f"\n‚úÖ Input file created: {output_path}")

    # Extract functional only (e.g., b3lyp from b3lyp/6-31g(d))
    functional_match = re.search(r'([a-zA-Z0-9\-]+)(?=/)', route)
    if functional_match:
        functional = functional_match.group(1)
    else:
        print("‚ö†Ô∏è Could not extract functional from route. Skipping stability job.")
        return

    stab_mode = prompt("Add stability job? [none/link1/separate]: ").strip().lower()
    while stab_mode not in ["none", "link1", "separate"]:
        stab_mode = prompt("Please enter one of [none/link1/separate]: ").strip().lower()

    if stab_mode == "link1":
        with open(output_path, "a") as f:
            f.write("\n--Link1--\n")
            f.write(f"%oldchk={filename}.chk\n")
            f.write(f"%chk={filename}-stab.chk\n")
            f.write(f"#p {functional} guess=read stable=opt chkbasis geom=check\n\n")
            f.write(f"{title} (stability check)\n\n")
            f.write(f"{charge} {multiplicity}\n\n\n")
            if basis:
                f.write(f"@{basis}\n")
        print(f"‚úÖ Stability job added via Link1 in: {output_path}")

    elif stab_mode == "separate":
        stab_path = f"{filename}-stab.com"
        with open(stab_path, "w") as f:
            f.write(f"%oldchk={filename}.chk\n")
            f.write(f"%chk={filename}-stab.chk\n")
            f.write(f"#p {functional} guess=read stable=opt chkbasis geom=check\n\n")
            f.write(f"{title} (stability check)\n\n")
            f.write(f"{charge} {multiplicity}\n\n\n")
            if basis:
                f.write(f"@{basis}\n")
        print(f"‚úÖ Stability job written to separate file: {stab_path}")

