L1:
  ntrex1:
    error_patterns:
      - "ntrex1"
      - "Error termination via Lnk1e in l1.exe"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      This error occurs when the path in the %chk directive is invalid.
      Make sure to specify a valid and accessible file path in %chk.

  Illegal ITpye or MSType generated by parse:
    error_patterns:
      - "Illegal ITpye or MSType generated by parse"
      - "Error termination via Lnk1e in l1.exe"
    fix:
      keywords_to_add: []
      keywords_to_remove: ["freq", "sp"]
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      This is usually caused by illegal combinations in the route section.
      For example, combining 'sp' and 'freq' is not allowed.

  QPErr:
    error_patterns:
      - "QPErr"
      - "syntax error was detected in the input file"
      - "Error termination via Lnk1e in l1.exe"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      Caused by incorrect keyword or malformed syntax in the input file.
      Carefully check the route line and formatting for typos or illegal expressions.


L101:
  End of file in Zsymb:
    error_patterns:
      - "End of file in ZSymb"
    fix:
      keywords_to_add:
        - "geom=check"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      Typically caused by a missing blank line at the end of the geometry section.
      Alternatively, the user may have forgotten to include `geom=check` when expecting geometry from a checkpoint.

  Found a string as input:
    error_patterns:
      - "Found a string as input"
      - "Wanted an integer as input"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      Often due to a missing charge/multiplicity line or an omitted title section.
      Ensure the input contains: title line, charge/multiplicity, and coordinates in that order.

  There are no atoms in this input structure:
    error_patterns:
      - "There are no atoms in this input structure"
    fix:
      keywords_to_add:
        - "geom=check"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      The molecule specification section is missing.
      This may be due to the omission of geometry or an incorrect checkpoint-related keyword.

  Symbol not found in Z-matrix:
    error_patterns:
      - "Symbol .* not found in Z-matrix"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      An undefined variable or symbol was referenced.
      Check all variable names in the Z-matrix to ensure consistency.

  Variable index is out of range (Case 1):
    error_patterns:
      - "Variable index .* is out of range"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      You likely forgot to declare a variable in the Z-matrix or parameter list.

  Variable index is out of range (Case 2):
    error_patterns:
      - "Unknown center .*"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "input"
    notes: |
      Attempted to define an atom in terms of a non-existent center.
      Review Z-matrix references for atoms that havenâ€™t been defined.

  Attempt to redefine unrecognized symbol:
    error_patterns:
      - "Attempt to redefine unrecognized symbol"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: true
      inject_into: "input"
    notes: |
      When using `geom=modify`, you must ensure that the variables being modified actually exist in the checkpoint file.
      This error indicates that they do not.

L103:
  Error imposing constraints:
    error_patterns:
      - "Error imposing constraints"
    fix:
      keywords_to_add:
        - "opt=(modredundant,calcall,step=5)"
      keywords_to_remove:
        - "opt=modredundant"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "route"
    notes: |
      Usually occurs during constrained optimization (e.g., QST2, modredundant).
      Try reducing the step size or using TS(Berny) or QST3 if applicable.

  FormBX had a problem:
    error_patterns:
      - "FormBX had a problem"
      - "Linear angle in Bend"
      - "Error in internal coordinate system"
    fix:
      keywords_to_add:
        - "opt=cartesian"
      keywords_to_remove:
        - "opt=modredundant"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "route"
    notes: |
      Internal coordinate system fails when atoms line up linearly.
      Switching to Cartesian coordinates usually solves this issue.

  Maximum of*** iterations exceeded in RedStp:
    error_patterns:
      - "Maximum of.*iterations exceeded in RedStp"
    fix:
      keywords_to_add:
        - "opt=maxcycle=200"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "route"
    notes: |
      Geometry optimization did not converge.
      Increase the maximum number of optimization cycles.

  Linear search skipped for unknown reason:
    error_patterns:
      - "Linear search skipped for unknown reason"
    fix:
      keywords_to_add:
        - "opt=calcfc"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "route"
    notes: |
      Indicates invalid Hessian.
      Restart the optimization using `opt=calcfc` to recalculate force constants.

  "Inconsistency: ModMin= N Eigenvalue= MM":
    error_patterns:
      - "Inconsistency:  ModMin=.*Eigenvalue=.*"
    fix:
      keywords_to_add:
        - "opt=ts"
      keywords_to_remove:
        - "opt=qst2"
        - "opt=qst3"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "route"
    notes: |
      This error occurs during TS optimization with QST2/QST3.
      Switch to `opt=ts` for a more stable optimization path.


L108:
  Variable has invalid number of steps:
    error_patterns:
      - "Variable .* has invalid number of steps"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This is caused by an incorrect PES scan definition. Most commonly, there are two blank lines 
      between the Z-matrix and the variables block.
      
      Fix:
        - Ensure only one blank line separates the Z-matrix and the variable definition section.
        - Check that each scan variable has a valid number of steps > 0.


L114:
  Error in INITNF:
    error_patterns:
      - "ERROR IN INITNF"
      - "NUMBER OF VARIABLES \\(\\s*0\\s*\\) INCORRECT"
    fix:
      keywords_to_add:
        - "opt=calcall"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This error occurs during optimization using a non-resolved gradient method without
      explicitly declared variables (e.g., CCSD(T) or other post-HF methods without geometry support).

      Fix:
        - Switch to a method that supports geometry optimizations, such as MP2 or DFT.
        - Try using `opt=calcall` to force all coordinates to be treated as variables.



L123:
  Delta-x Convergence NOT Met:
    error_patterns:
      - "Delta-x Convergence NOT Met"
      - "Maximum number of corrector steps exceeded"
    fix:
      keywords_to_add:
        - "irc=(maxpoints=50,maxcycle=500)"
        - "scf=qc"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Common in IRC (Intrinsic Reaction Coordinate) calculations where the optimization fails to converge.

      Fixes:
        - Increase the number of corrector steps using `irc=maxpoints=50,maxcycle=500`.
        - Use a more robust SCF method like `scf=qc` to improve convergence stability.
        - If persistent, switch to IRC algorithm `irc=lqa`.
  GS2 Optimization Failure:
    error_patterns:
      - "GS2 Optimization Failure"
    fix:
      keywords_to_add:
        - "irc=lqa"
      keywords_to_remove:
        - "irc=gs2"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      The GS2 optimization algorithm failed, often due to convergence issues with the Hessian correction.

      Fix:
        - Use the `irc=lqa` keyword to switch to the LQA (Linear Quadratic Approximation) algorithm.


L202:
  Problem with the distance matrix:
    error_patterns:
      - "Problem with the distance matrix"
      - "Small interatomic distances encountered"
    fix:
      keywords_to_add:
        - "geom=check"
        - "opt=modredundant"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Atoms are likely overlapping or nearly co-located, which can crash the distance matrix generation.

      Fix:
        - Double-check the geometry for atoms with unrealistically close positions.
        - Use `geom=check` to pull from previous stable geometry if intended.
        - If problem persists, visualize the structure and reoptimize manually after modifying coordinates.
  Atom too close:
    error_patterns:
      - "Atom too close"
    fix:
      keywords_to_add:
        - "geom=nocrowd"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Gaussian detected atoms that are physically too close to each other, likely due to errors in coordinates.

      Fix:
        - Add `geom=nocrowd` to bypass atom proximity check.
        - Review initial geometry to ensure atoms aren't nearly overlapping.
  Change in point group or standard orientation:
    error_patterns:
      - "Change in point group or standard orientation"
      - "Omega: Change in point group or standard orientation"
    fix:
      keywords_to_add:
        - "nosymm"
      keywords_to_remove:
        - "symmetry"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This error may be triggered by symmetry breaking during optimization.

      Fix:
        - Use `nosymm` to turn off symmetry detection.
        - Ensure that Z-matrix or input geometry is desymmetrized if symmetry-related issues persist.
  FOPT requested but NVar= XX while NDOF= YY:
    error_patterns:
      - "FOPT requested but NVar="
    fix:
      keywords_to_add:
        - "opt"
      keywords_to_remove:
        - "fopt"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This occurs when the full optimization with FOPT is inconsistent with defined internal degrees of freedom.

      Fix:
        - Use `opt` instead of `fopt`.
        - Check and adjust Z-matrix constraints or switch to Cartesian coordinates (`opt=cartesian`) if needed.



L301:
  End of file reading basis center:
    error_patterns:
      - "End of file reading basis center"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This is an input error. You specified a custom basis set (e.g., via `gen`) but did not provide the actual basis set data.

      Fix:
        - Include the full basis set definition in the input.
        - Make sure no blank lines exist before the basis or ECP block starts.

  EOF while reading ECP pointer card:
    error_patterns:
      - "EOF while reading ECP pointer card"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      You used a GenECP basis without specifying the ECP definition, or included blank lines separating the basis and ECP blocks.

      Fix:
        - Include both the basis set block and the ECP block.
        - Ensure only one blank line exists between them.

  Atomic number out of range for basis set:
    error_patterns:
      - "Atomic number out of range for"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      You are using a basis set that doesnâ€™t support all elements in the molecule.

      Fix:
        - Choose a different basis set that supports all atoms.
        - Use basis sets like `def2SVP` or `cc-pVTZ` which support a wider range.

  No Q value available:
    error_patterns:
      - "No Q value available"
    fix:
      keywords_to_add:
        - "iop(3/124=4)"
      keywords_to_remove:
        - "empiricaldispersion"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Occurs when using ghost atoms (e.g., Bq) with dispersion-corrected functionals.

      Fix:
        - Avoid dispersion keywords like `empiricaldispersion=GD3` with ghost atoms.
        - If using them is necessary, force disable dispersion with `iop(3/124=4)`.

  The combination of multiplicity and electrons is impossible:
    error_patterns:
      - "The combination of multiplicity"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This means the spin multiplicity doesnâ€™t match the number of electrons.

      Fix:
        - Recheck the total charge and multiplicity.
        - Adjust them to satisfy: multiplicity = (n_alpha - n_beta + 1)

  Unable to choose the S8 parameter:
    error_patterns:
      - "Unable to choose the S8 parameter"
    fix:
      keywords_to_add: []
      keywords_to_remove:
        - "empiricaldispersion=gd3"
        - "empiricaldispersion=gd3bj"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Your functional isnâ€™t compatible with GD3 or GD3BJ corrections.

      Fix:
        - Either use a compatible functional or remove dispersion correction.

  No RCov radius available:
    error_patterns:
      - "No RCov radius available"
    fix:
      keywords_to_add: []
      keywords_to_remove:
        - "empiricaldispersion"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Dispersion correction is being used for elements not supported.

      Fix:
        - Remove the dispersion keyword.
        - Or replace the element with one that has supported parameters.

  No C6 coefficient available:
    error_patterns:
      - "No C6 coefficient available"
    fix:
      keywords_to_add: []
      keywords_to_remove:
        - "empiricaldispersion"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Similar to RCov radius issue â€” Gaussian lacks parameters for certain atoms.

      Fix:
        - Disable empirical dispersion or select elements with known C6 parameters.

  Unrecognized atomic symbol:
    error_patterns:
      - "Unrecognized atomic symbol"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      An atom in the general basis block has a typo or isnâ€™t a standard atomic symbol.

      Fix:
        - Correct the symbol in the Gen/GenECP block.
        - Avoid using placeholders or misspelled elements.

  No X atoms found in this molecule:
    error_patterns:
      - "No X atoms found in this molecule"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      You defined a basis or ECP for an atom that isnâ€™t in the geometry.
  
      Fix:
        - Remove the extra atom definition.



L401:
  Unable to project read-in occupied orbitals:
    error_patterns:
      - "Unable to project read-in occupied orbitals"
    fix:
      keywords_to_add: []
      keywords_to_remove:
        - "guess=read"
      lines_to_replace: []
      checkpoints_required: true
      inject_into: null
    notes: |
      This error occurs when Gaussian fails to project orbitals from a checkpoint file into the new basis or geometry. It often happens when the structure, basis set, or charge/multiplicity has changed between jobs.

      Fix:
        - Avoid using `guess=read` if the basis set or molecular geometry has changed.
        - If projection must be used, ensure that the new input exactly matches the original job in geometry and basis.
        - Alternatively, omit `guess=read` and let Gaussian generate a fresh guess.


L402:
  MM microiterations failed:
    error_patterns:
      - "MM microiterations failed"
    fix:
      keywords_to_add:
        - "opt=calcfc"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This error is caused by bad initial geometries, typically with atoms too close, causing molecular mechanics microiterations to fail.

      Fix:
        - Add `opt=calcfc` to recalculate the force constants instead of relying on guesses.
        - Alternatively, check and modify the starting geometry to increase the distance between close-contact atoms.
        - You may also want to visualize the structure and verify atom proximity before rerunning.


L502:
  "Convergence failure --run terminated":
    error_patterns:
      - "Convergence failure -- run terminated."

    fix:
      keywords_to_add:
        - "scf=(qc,conver=8)"
      keywords_to_remove:
        - "scf=xqc"
        - "scf=yqc"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This error occurs when the SCF procedure fails to converge.

      Fix:
        - Use `scf=qc` to switch to quadratic convergence.
        - Add `conver=8` to relax SCF convergence criteria slightly.
        - You may also try adding `int=ultrafine` or `scf=novaracc` if using DFT.
        - If error persists, try a better guess (e.g., `guess=read` from a previous checkpoint).


  Inaccurate quadrature in CalDSu:
    error_patterns:
      - "Inaccurate quadrature in CalDSu"
    fix:
      keywords_to_add:
        - "int=superfinegrid"
        - "int=noxctest"
      keywords_to_remove:
        - "int=ultrafine"
        - "int=ultrafinegrid"
        - "int=grid=sg1"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: "route"
    notes: |
      This error indicates a failure in numerical integration during DFT due to insufficient grid accuracy.

      Fix:
        - Add `int=ultrafine` to increase the quadrature grid precision.
        - Include `scf=novaracc` to enhance numerical stability.
        - Remove coarse or SG1 grid settings if present.



L508:
  Convergence failure:
    error_patterns:
      - "Convergence failure  "
    fix:
      keywords_to_add:
        - "scf=qc"
        - "int=superfinegrid"
      keywords_to_remove:
        - "scf=xqc"
        - "scf=yqc"
        - "int=ultrafinegrid"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This SCF convergence error is commonly encountered in high-level methods or poorly conditioned geometries.

      Fix:
        - Add `scf=qc` to enable quadratic convergence.
        - Use `int=ultrafine` to increase DFT quadrature accuracy.
        - Try `scf=novaracc` to stabilize the integral accuracy.
        - If using `scf=xqc` or `scf=yqc`, remove them.


L602:
  "GetVDW: no radius for atom":
    error_patterns:
      - "GetVDW:  no radius for atom"
      - "no radius for atom"
    fix:
      keywords_to_add:
        - "pop=chelpg"
        - "readradii"
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: |
        # At the end of the input file:
        # Example:
        C 1.70
        H 1.20
        O 1.52
    notes: |
      Gaussian cannot find the van der Waals radius for one or more atoms when using electrostatic potential fitting methods (e.g., CHELPG).

      Fix:
        - Add `readradii` and manually specify van der Waals radii at the end of the input file.
        - Ensure `pop=chelpg` is present if this is the intended fitting method.



L716:
  Error on Z-matrix card:
    error_patterns:
      - "Error on Z-matrix card"
      - "angle.*outside the valid range"
      - "Conversion from Z-matrix to cartesian coordinates failed"
    fix:
      keywords_to_add:
        - "geom=connectivity"
        - "opt=cartesian"
      keywords_to_remove:
        - "geom=modredundant"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Gaussian detected invalid angles or other issues while converting from Z-matrix to Cartesian coordinates.
      Commonly caused by angle values outside [0Â°, 180Â°] or malformed Z-matrix entries.

      Fix:
        - Switch to `opt=cartesian` to bypass internal coordinate system.
        - If using `geom=modredundant`, remove it and ensure your input geometry is correct.
        - Consider regenerating the input using Cartesian coordinates if the Z-matrix is unstable.



L801:
  Excessive mixing of frozen core and valence orbitals:
    error_patterns:
      - "Excessive mixing of frozen core and valence orbitals"
    fix:
      keywords_to_add:
        - "MP2(full)"
        - "CCSD(T,full)"
        - "IOp(8/11=1)"
      keywords_to_remove:
        - "MP2"
        - "CCSD(T)"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This occurs during post-HF or TD-SCF calculations when the frozen-core approximation fails due to
      strong mixing between core and valence orbitals.

      Fix:
        - Use full correlation by adding (full) to the method: MP2 â†’ MP2(full), CCSD(T) â†’ CCSD(T,full).
        - Alternatively, add `IOp(8/11=1)` to bypass the check (make sure to verify physical validity afterward).



L801:
  Excessive mixing of frozen core and valence orbitals:
    error_patterns:
      - "Excessive mixing of frozen core and valence orbitals"
    fix:
      keywords_to_add:
        - "MP2(full)"
        - "CCSD(T,full)"
        - "IOp(8/11=1)"
      keywords_to_remove:
        - "MP2"
        - "CCSD(T)"
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      Occurs in post-HF or TD-SCF jobs where frozen core and valence orbitals excessively overlap.

  Fatal Problem:
    error_patterns:
      - "Fatal Problem"
      - "The smallest alpha delta epsilon"
    fix:
      keywords_to_add:
        - "IOp(8/11=1)"
      keywords_to_replace: []
      keywords_to_remove: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Appears in TDDFT or post-HF calculations when orbital energy denominators approach zero,
      leading to numerical instability.

      Fixes:
        - Add `IOp(8/11=1)` to allow Gaussian to continue past the instability warning.
        - Optionally switch to a functional with more Hartreeâ€“Fock exchange to increase the orbital gap.


L801:
  "Consistency failure #1 in FindCO":
    error_patterns:
      - "Consistency failure #1 in FindCO"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      This error typically arises due to issues with basis set definitions, especially when using Gen or GenECP.

      Fixes:
        - Double-check that all atoms present in the geometry have corresponding basis set definitions.
        - Ensure basis set blocks are complete and correctly formatted.
        - Avoid mismatched or missing entries in custom basis input.



L906:
  KLT.ge.NIJTC in GetRSB:
    error_patterns:
      - "KLT.ge.NIJTC in GetRSB"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      This error typically occurs during MP2 calculations and is often related to issues with pseudopotentials.

      Fixes:
        - Do not use CEP-121G*; instead use CEP-121G (without the asterisk) for relevant elements.
        - Ensure pseudopotential and basis set pairing is consistent and correctly applied.



L913:
  MAX. CYCLES:
    error_patterns:
      - "MAX. CYCLES"
    fix:
      keywords_to_add:
        - "maxcyc=100"
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      This error occurs in CISD, CCSD, or CCSD(T) calculations when the iterative solver fails to converge within the allowed number of cycles.

      Fixes:
        - Increase the maximum number of cycles using `maxcyc=100` or higher.
        - Inspect output for signs of energy convergence. If energies oscillate, check:
            * Geometry quality
            * Reference state
            * Basis set stability
        - Try refining the structure or switching to a different basis set.


L914:
  CISAX needs XXXXX more words of memory:
    error_patterns:
      - "CISAX needs"
      - "more words of memory"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into:
        - type: "header"
          content: "%mem=8GB"
      checkpoints_required: false
    notes: |
      This error indicates that the calculation does not have enough memory allocated to complete a CISAX (Configuration Interaction Singles with Axis) task.

      Fixes:
        - Increase the memory in the input header using `%mem=8GB` or more.
        - Alternatively, reduce the number of processors used with `%nprocshared=4` or fewer.
        - Avoid memory-heavy operations if running on shared nodes or constrained environments.


L1002:
  Inaccurate quadrature in CalDSu:
    error_patterns:
      - "Inaccurate quadrature in CalDSu"
    fix:
      keywords_to_add:
        - "int=ultrafine"
        - "scf=novaracc"
        - "guess=indo"
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      This error occurs when the numerical integration grid is too coarse for DFT, especially with large or diffuse basis sets.

      Fixes:
        - Use finer integration grids: `int=ultrafine` or `int=grid=300590`.
        - Combine with `scf=novaracc` and `guess=indo` for robustness.
        - Consider these together if isolated fixes fail.

  No func 3rd derivs:
    error_patterns:
      - "No func 3rd derivs"
    fix:
      keywords_to_add:
        - "polar=Numerical"
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Some functionals (like LC-wPBE or HSE) lack analytical 3rd derivatives needed for hyperpolarizability (`polar`) calculations.

      Fixes:
        - Replace `polar` with `polar=Numerical` to force numerical derivatives.
        - Alternatively, use a different functional that supports analytical 3rd derivatives.

  NIJ > Max2 in MMCore:
    error_patterns:
      - "NIJ > Max2 in MMCore"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into:
        - type: "note"
          content: "This is a known bug. Upgrade to Gaussian 09 C.01 or later."
      checkpoints_required: false
    notes: |
      Internal memory handling bug related to MMCore. Resolved in Gaussian 09 C.01 and newer.

      Fix:
        - Upgrade to a newer version of Gaussian.

  XXXXX words are not enough for AlAXAO:
    error_patterns:
      - "words are not enough for AlAXAO"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into:
        - type: "header"
          content: "%mem=16GB"
      checkpoints_required: false
    notes: |
      Insufficient memory for AlAXAO during large linear algebra matrix operations.

      Fixes:
        - Increase memory in the header with `%mem=16GB` or more.
        - Reduce number of processors (`%nprocshared`) if memory per thread is too low.



L9999:
  Wrong number of Negative eigenvalues:
    error_patterns:
      - "Wrong number of Negative eigenvalues"
    fix:
      keywords_to_add:
        - "opt=noeigen"
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Gaussian expects a specific number of negative frequencies during TS optimization.
      - Desired = 1 (for transition states), but Actual > 1 triggers failure.
      - This fix skips the eigenvalue check after optimization.

  Number of steps exceeded:
    error_patterns:
      - "Number of steps exceeded"
    fix:
      keywords_to_add:
        - "opt=(maxcycle=300)"
      keywords_to_replace:
        - old: "opt=.*"
          new: "opt=(maxcycle=300)"
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Default NSteps for opt is 100. If a TS or large system optimization doesn't converge, extend maxcycle.
      Optionally add:
        - `opt=calcfc` or `opt=readfc`
        - `opt=cartesian`
        - change to `opt=gdiis` or `opt=gediis`
      depending on system behavior.

  Determination of dummy atom variables in Z-matrix conversion failed:
    error_patterns:
      - "Determination of dummy atom variables in z-matrix conversion failed"
    fix:
      keywords_to_add:
        - "geom=cartesian"
      keywords_to_replace:
        - old: "geom=allcheck"
          new: "geom=cartesian"
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Conversion back to Z-matrix failed due to dummy atom issues or internal coordinate inconsistencies.
      Fix: Switch to Cartesian coordinates to avoid Z-matrix transformation problems.


  "Link 9999 error termination":
    error_patterns:
      - "Error termination request processed by link 9999"
    fix:
      keywords_to_add: []
      keywords_to_remove: []
      lines_to_replace: []
      checkpoints_required: false
      inject_into: null
    notes: |
      This is a generic catch-all error from Gaussian indicating that something
      went wrong in a non-specific way. It is often a result of cascading errors
      or a malformed input file.

      Fix:
        - Carefully check the log file above this message for earlier errors.
        - Validate molecule specification, route section, and any custom blocks.
        - If unclear, try simplifying the calculation or validating inputs using GaussView.



Other:
  Erroneous write:
    error_patterns:
      - "Erroneous write"
      - "writwa"
      - "write -1"
      - "No space left on device"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      This indicates disk I/O failure. Causes include:
        - Output directory is full
        - Filesystem quota exceeded
        - File system or networked storage timeout
      Fix:
        - Check and clear disk space with `df -h`
        - Ensure `GAUSS_SCRDIR` exists and has sufficient space
        - Avoid writing to mounted/shared drives with high latency

  malloc failed:
    error_patterns:
      - "malloc failed"
      - "Resource temporarily unavailable"
    fix:
      keywords_to_add:
        - "%mem=512MB"
      keywords_to_replace:
        - old: "%mem=.*"
          new: "%mem=512MB"
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Memory allocation failure due to insufficient RAM or overly large memory request.
      Fix:
        - Lower memory request in input file (%mem).
        - Reduce number of processors if using shared memory nodes.

  "galloc: could not allocate memory":
    error_patterns:
      - "galloc: could not allocate memory"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Gaussian uses ~1 GB more than %mem allocation.
      Fix:
        - In SLURM: request ~1 GB more in `--mem` than set in `%mem`.
        - Example: `%mem=7GB` requires `--mem=8GB` in SLURM script.

  No such file or directory:
    error_patterns:
      - "No such file or directory"
      - "File name ="
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Input or scratch file path doesn't exist.
      Fix:
        - Verify path exists for input, output, and checkpoint files.
        - Ensure `GAUSS_SCRDIR` is set to a valid local scratch path.

  Files in the Gaussian directory are world accessible:
    error_patterns:
      - "Files in the Gaussian directory are world accessible"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      This is a permission issue.
      Fix:
        - Secure the Gaussian directory with:
          `chmod -R 750 /path/to/Gaussian`

  Failed to open execfile:
    error_patterns:
      - "Failed to open execfile"
    fix:
      keywords_to_add: []
      keywords_to_replace: []
      keywords_to_remove: []
      lines_to_replace: []
      inject_into: null
      checkpoints_required: false
    notes: |
      Could be caused by bad Gaussian installation or malformed input.
      Fix:
        - Ensure Gaussian installation is complete and `g16` is in your PATH.
        - Avoid using `nprocl`, replace with `nprocshared=N` if needed.

 

      
